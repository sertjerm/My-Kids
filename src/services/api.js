// src/services/api.js
// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö EarnedPoints ‡πÅ‡∏•‡∏∞ ActivityType ‡∏ï‡∏≤‡∏° Database Schema

import axios from "axios";

// API Configuration - ‡πÉ‡∏ä‡πâ Vite environment variable
const API_BASE_URL =
  import.meta.env.VITE_API_URL || "https://sertjerm.com/my-kids-api/api.php";

console.log("üîó API_BASE_URL:", API_BASE_URL);

// Helper function to make API calls with better error handling
const apiCall = async (endpoint, method = "GET", data = null) => {
  const url = endpoint ? `${API_BASE_URL}?${endpoint}` : API_BASE_URL;

  try {
    console.log(`üì§ ${method} ${url}`, data ? { data } : '');

    const response = await axios({
      url,
      method,
      data: method !== "GET" ? data : undefined,
      headers: { "Content-Type": "application/json" },
      timeout: 10000, // 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    });

    console.log(`üì• Response:`, response.data);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response format
    if (response.data && response.data.error) {
      throw new Error(response.data.message || response.data.error);
    }
    return response.data;
  } catch (error) {
    console.error("‚ùå API Error:", error);
    
    // Handle different error types
    if (error.response) {
      // Server responded with error status
      const errorMsg = error.response.data?.message || error.response.data?.error || `HTTP ${error.response.status}`;
      throw new Error(errorMsg);
    } else if (error.request) {
      // Request was made but no response
      throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ");
    } else {
      // Something else happened
      throw new Error(error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏");
    }
  }
};

// Health Check API
export const healthAPI = {
  check: () => apiCall("health"),
};

// Children API - ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö backend endpoints
export const childrenAPI = {
  // ‡∏î‡∏∂‡∏á‡πÄ‡∏î‡πá‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  getAll: () => apiCall("children"),

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏î‡πá‡∏Å‡πÉ‡∏´‡∏°‡πà
  create: (data) =>
    apiCall("children", "POST", {
      Name: data.name,
      Age: data.age,
      AvatarPath: data.avatarPath || "üë∂",
    }),

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• dashboard (‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
  getDashboard: () => apiCall("dashboard"),
};

// Behaviors API - ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö backend endpoints
export const behaviorsAPI = {
  // ‡∏î‡∏∂‡∏á‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  getAll: () => apiCall("behaviors"),

  // ‡∏î‡∏∂‡∏á‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏î‡∏µ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (good-behaviors ‡∏´‡∏£‡∏∑‡∏≠ tasks)
  getGood: () => apiCall("good-behaviors"),

  // ‡∏î‡∏∂‡∏á‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏î‡∏µ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (bad-behaviors)
  getBad: () => apiCall("bad-behaviors"),
};

// Rewards API
export const rewardsAPI = {
  // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  getAll: () => apiCall("rewards"),
};

// Activities API - *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Database Schema ***
export const activitiesAPI = {
  // ‡∏î‡∏∂‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  getAll: () => apiCall("activities"),

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Database Schema
  create: (data) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!data.childId || !data.itemId) {
      throw new Error("‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ childId ‡πÅ‡∏•‡∏∞ itemId");
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EarnedPoints ‡∏à‡∏≤‡∏Å Points ‡πÅ‡∏•‡∏∞ Count
    const earnedPoints = data.earnedPoints || ((data.points || 0) * (data.count || 1));

    const payload = {
      ChildId: data.childId,
      ItemId: data.itemId,
      ActivityType: data.activityType, // 'Good', 'Bad', 'Reward'
      Count: data.count || 1,
      EarnedPoints: earnedPoints, // *** ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ô‡∏µ‡πâ ***
      Note: data.note || "",
      ActivityDate: data.activityDate || new Date().toISOString().split("T")[0],
    };

    console.log("üéØ Creating activity with payload:", payload);
    
    return apiCall("activities", "POST", payload);
  },

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (alias)
  record: function(data) {
    return this.create(data);
  }
};

// Dashboard API
export const dashboardAPI = {
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• dashboard
  getSummary: () => apiCall("dashboard"),
};

// API Utils ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
export const apiUtils = {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ API
  checkStatus: async () => {
    try {
      const result = await healthAPI.check();
      return {
        status: "connected",
        data: result,
      };
    } catch (error) {
      return {
        status: "error",
        data: { error: error.message },
      };
    }
  },

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÄ‡∏õ‡πá‡∏ô format ‡∏ó‡∏µ‡πà frontend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  transformChild: (child) => ({
    id: child.Id,
    name: child.Name,
    age: child.Age,
    avatar: child.AvatarPath || "üë∂",
    todayPoints: child.TodayPoints || 0,
    totalPoints: child.TotalPoints || 0,
    earnedPoints: child.EarnedPoints || 0,
    deductedPoints: child.DeductedPoints || 0,
    isActive: child.IsActive,
  }),

  transformBehavior: (behavior) => ({
    id: behavior.Id,
    name: behavior.Name,
    points: behavior.Points,
    type: behavior.Type,
    color: behavior.Color,
    category: behavior.Category,
    isRepeatable: behavior.IsRepeatable,
    isActive: behavior.IsActive,
  }),

  transformReward: (reward) => ({
    id: reward.Id,
    name: reward.Name,
    cost: reward.Cost,
    color: reward.Color,
    category: reward.Category,
    isActive: reward.IsActive,
  }),

  transformActivity: (activity) => ({
    id: activity.Id || `${activity.ChildId}-${activity.ItemId}-${Date.now()}`,
    childId: activity.ChildId,
    childName: activity.ChildName,
    itemId: activity.ItemId,
    itemName: activity.ItemName,
    activityType: activity.ActivityType,
    count: activity.Count,
    earnedPoints: activity.EarnedPoints || 0,
    note: activity.Note,
    activityDate: activity.ActivityDate,
    createdAt: activity.CreatedAt,
  }),

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° - ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô frontend
  formatActivityData: (childId, itemId, activityType, points = 0, count = 1, note = "") => {
    return {
      childId,
      itemId,
      activityType, // 'Good', 'Bad', 'Reward'
      points,
      count,
      note,
      earnedPoints: points * count, // *** ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EarnedPoints ***
      activityDate: new Date().toISOString().split("T")[0],
    };
  },

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≤‡∏Å‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°
  createActivityFromBehavior: (childId, behavior, count = 1, note = "") => {
    return apiUtils.formatActivityData(
      childId,
      behavior.id,
      behavior.type, // 'Good' ‡∏´‡∏£‡∏∑‡∏≠ 'Bad'
      behavior.points,
      count,
      note
    );
  },

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
  createActivityFromReward: (childId, reward, count = 1, note = "") => {
    return apiUtils.formatActivityData(
      childId,
      reward.id,
      'Reward',
      -Math.abs(reward.cost), // ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏ö‡πÄ‡∏™‡∏°‡∏≠
      count,
      note
    );
  },

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ - ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô frontend
  recordMultipleActivities: async (activities) => {
    const results = [];
    
    for (const activity of activities) {
      try {
        const result = await activitiesAPI.create(activity);
        results.push({
          success: true,
          data: result,
          activity: activity
        });
      } catch (error) {
        console.error("Failed to record activity:", activity, error);
        results.push({
          success: false,
          error: error.message,
          activity: activity
        });
      }
    }
    
    return results;
  },

  // ‡∏ä‡πà‡∏ß‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≤‡∏Å‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°
  getActivityTypeFromBehavior: (behavior) => {
    if (behavior.Type === 'Good') return 'Good';
    if (behavior.Type === 'Bad') return 'Bad';
    return 'Good'; // default fallback
  },

  // ‡∏ä‡πà‡∏ß‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
  getActivityTypeForReward: () => 'Reward',

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  calculateEarnedPoints: (points, count) => {
    return (points || 0) * (count || 1);
  },

  // *** ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Debug ***
  debugActivity: (activityData) => {
    console.log("üîç Debug Activity Data:", {
      original: activityData,
      hasChildId: !!activityData.childId,
      hasItemId: !!activityData.itemId,
      hasActivityType: !!activityData.activityType,
      calculatedEarnedPoints: apiUtils.calculateEarnedPoints(activityData.points, activityData.count)
    });
  }
};

// Export ‡∏Ñ‡πà‡∏≤ config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô
export const API_CONFIG = {
  BASE_URL: API_BASE_URL,
  ENDPOINTS: {
    HEALTH: "health",
    CHILDREN: "children",
    BEHAVIORS: "behaviors",
    GOOD_BEHAVIORS: "good-behaviors",
    BAD_BEHAVIORS: "bad-behaviors",
    REWARDS: "rewards",
    ACTIVITIES: "activities",
    DASHBOARD: "dashboard",
  },
  ACTIVITY_TYPES: {
    GOOD: 'Good',
    BAD: 'Bad', 
    REWARD: 'Reward'
  }
};

// Export default object ‡∏£‡∏ß‡∏°
const api = {
  health: healthAPI,
  children: childrenAPI,
  behaviors: behaviorsAPI,
  rewards: rewardsAPI,
  activities: activitiesAPI,
  dashboard: dashboardAPI,
  utils: apiUtils,
};

export default api;